Promises :

    can land up in  states :

    1. Pending 
    2. Fullfill
    3. Rejected

    Promise in js is object that holds these properties :

        [[PromiseState]]: "pending"
        [[PromiseResult]]: undefined

        Here PromiseState is already discussed and can fall into 3 states :
        1. pending 
        2. fullfilled
        3. Rejected

        PromiseResult can be : 
            When state of promise is "Pending", at that time...PromiseResult will be undefined 
            when state of promise is "fullfilled" or "Rejected", at that time...PromiseResult
            will hold some DATA.


            Syntax:

            let promise = new Promise(<callback_fn>) :
            <callback_fn> is also known as executor.
            now this <callback_fn> takes 2 calbacks as input.
            General name convention of these callback is - resolve and reject.

            here resolve is called whenever we want promise state to change to "fullfilled".
            Reject is called whenever we want promise state to change to "Rejected".

            here, promiseOBJ is an object that has  3 built in methods :

            1. then :

                promiseOBJ.then(<callback_fn>)..
                here then() method takes callback as input nad this callback function will be triggered whenever 
                promise state is changed to Fullfill.
                this callback_fn will get some data as input...bsically whatever data is 
                supplied to resOlve method...same data will be given as input to this <callback_fn>
                
                then() calls are chainable 

                NOTE:
                 Also then() method returns Promise
 
            2. Catch:

                PromiseOBJ.catch(callback_fn)...
                here then() method takes callback as input nad this callback function will be triggered whenever 
                promise state is changed to Rejected.
                this callback_fn will get some data as input...bsically whatever data is 
                supplied to REJECT method...same data will be given as input to this <callback_fn>
                

            3. finally :

            PromiseOBJ.finally(callback_fn)
                whenever Promise is settled, (resolved/rejected), this method will be invoked.
                it takes a callback_fn but this callback does not get any input 

______________________________________________________________________________________________
    
     quetion :
     Create promise with resolve immdiately giving output value as 200.

     Quetion :
        creating any array of promise and once all the promise inside the array are  
        resolved ..print on console..."all Promise are resolved".

        const arr = [promise.resolve(200), promise.resolve(300), promise.resolve(500)]
        console.log(arr)
        console.log("All promise are resovede") 
    lets talk about easy scanario where promise are getting resolved immdiately.
    const arr = [promise.resolve(300), promise.resolve(500), promise.resolved(600)];

    here all the promise will be resolved imediately...
    hence easy to write code for this..

    But if array of promise looks liked :

    const promies1 = new promise((resOlve, reject) => {
        settimeout(()=>{
            resolve();
        }10000)
    });

    const arr = [promise.resolve(300), promise.resolve(500), promise.resolved(600)];

    here promise will be resolved after 10 seconds due to settimeout 
    therefore we need to wait for it to complete n then only print
    "all promise are resolved"

    to solve it, there is a method promise.all(<arrayofpromise);
    Promise.all(<arrayofpromise>)

    this method returns promise ...which gets resolved ONCE ALL THE PROMISE inside
    array get resolved/fulfilled

    if any promise inside this array gets REJECTED... catch method of promise.all
    will be fired

______________________________________________________________________________________________

 
        what is a promise?
        it i an object holding 2 important properties -
        state & data
        where state is of 3 type - pending fullfilled , rejected 

        primary usecase :
        to perform any async operation.
         
         eg:
            getting data from backend server...
        why/what purpose it is solving ?

        lets sy we want to get some data from backend...
        but it will take 5 seconds...
        now, as a frontend application...I don't want to block/restirct my users from
        using my application till the time i get data... 

______________________________________________________________________________________________


    async...await :
        there is a aletenative syntax for :
        promise.then().catch()

        function sum(a,b){
            return a+b
        }
const result = sum(20+80);
console.log(result);

const arr = [1,2,3,4,5];
for(let i =0; i<arr.length; i++ ){
    console.log(i)
}

now here i want to first finish executing sum() function before proceeding 
______________________________________________________________________________________________

