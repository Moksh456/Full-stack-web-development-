Promises :

    can land up in  states :

    1. Pending 
    2. Fullfill
    3. Rejected

    Promise in js is object that holds these properties :

        [[PromiseState]]: "pending"
        [[PromiseResult]]: undefined

        Here PromiseState is already discussed and can fall into 3 states :
        1. pending 
        2. fullfilled
        3. Rejected

        PromiseResult can be : 
            When state of promise is "Pending", at that time...PromiseResult will be undefined 
            when state of promise is "fullfilled" or "Rejected", at that time...PromiseResult
            will hold some DATA.


            Syntax:

            let promise = new Promise(<callback_fn>) :
            <callback_fn> is also known as executor.
            now this <callback_fn> takes 2 calbacks as input.
            General name convention of these callback is - resolve and reject.

            here resolve is called whenever we want promise state to change to "fullfilled".
            Reject is called whenever we want promise state to change to "Rejected".

            here, promiseOBJ is an object that has  3 built in methods :

            1. then :

                promiseOBJ.then(<callback_fn>)..
                here then() method takes callback as input nad this callback function will be triggered whenever 
                promise state is changed to Fullfill.
                this callback_fn will get some data as input...bsically whatever data is 
                supplied to resOlve method...same data will be given as input to this <callback_fn>
                
                then() calls are chainable 

                NOTE:
                 Also then() method returns Promise
 
            2. Catch:

                PromiseOBJ.catch(callback_fn)...
                here then() method takes callback as input nad this callback function will be triggered whenever 
                promise state is changed to Rejected.
                this callback_fn will get some data as input...bsically whatever data is 
                supplied to REJECT method...same data will be given as input to this <callback_fn>
                

            3. finally :

            PromiseOBJ.finally(callback_fn)
                whenever Promise is settled, (resolved/rejected), this method will be invoked.
                it takes a callback_fn but this callback does not get any input 

______________________________________________________________________________________________
    
     quetion :
     Create promise with resolve immdiately giving output value as 200.

     Quetion :
        creating any array of promise and once all the promise inside the array are  
        resolved ..print on console..."all Promise are resolved".

        const arr = [promise.resolve(200), promise.resolve(300), promise.resolve(500)]
        console.log(arr)
        console.log("All promise are resovede") 
    lets talk about easy scanario where promise are getting resolved immdiately.
    const arr = [promise.resolve(300), promise.resolve(500), promise.resolved(600)];

    here all the promise will be resolved imediately...
    hence easy to write code for this..

    But if array of promise looks liked :

    const promies1 = new promise((resOlve, reject) => {
        settimeout(()=>{
            resolve();
        }10000)
    });

    const arr = [promise.resolve(300), promise.resolve(500), promise.resolved(600)];

    here promise will be resolved after 10 seconds due to settimeout 
    therefore we need to wait for it to complete n then only print
    "all promise are resolved"

    to solve it, there is a method promise.all(<arrayofpromise);
    Promise.all(<arrayofpromise>)

    this method returns promise ...which gets resolved ONCE ALL THE PROMISE inside
    array get resolved/fulfilled

    if any promise inside this array gets REJECTED... catch method of promise.all
    will be fired

______________________________________________________________________________________________

 
        what is a promise?
        it i an object holding 2 important properties -
        state & data
        where state is of 3 type - pending fullfilled , rejected 

        primary usecase :
        to perform any async operation.
         
         eg:
            getting data from backend server...
        why/what purpose it is solving ?

        lets sy we want to get some data from backend...
        but it will take 5 seconds...
        now, as a frontend application...I don't want to block/restirct my users from
        using my application till the time i get data... 

______________________________________________________________________________________________


    async...await :
        there is a aletenative syntax for :
        promise.then().catch()

        function sum(a,b){
            return a+b
        }
const result = sum(20+80);
console.log(result);

function sum(){
    return new promise((resolve,reject) =>{
        settimeout((200), 5000)
    })
}
______________________________________________________________________________________________

const result = await sum();
for(let i =0; i<reault; i++ ){
    console.log(i);
} 
console.log(result);  



// since we are dependent on result variable next line of cide...
hence we would want to finish execution of sun() method so that we can value of result variable...only
then we want to proceed...
here, await keyword does the job well since it looks neat also...

now assume same thing to be done with .then kindof syntax, then it might
look like -

function sum(){
    return new promise((resolve,reject) =>{
        settimeout((200), 5000)
    })
}

const result = await sum();
reault.then(data =>{
    const arr = [1,2,3,4,5];
for(let i =0; i<reault; i++ ){
    console.log(i);
} 
console.log(data);  
})

how to handle falling scanario's in async await :

we can use normal try/catch the rejection scanerio

______________________________________________________________________________________________

 JSON (javascript object notation) :
    JSON and javascript objects look very similar.
    sometime it gets really confusing between them.

     some difference:
     1. only datatypes in json are : String, number, boolean, null, object... 
     But undefined, function are not supported.

     Helper method in JS :

     JSON.Parse -> to convert json to js object 
     json.strigify -> to convert obj to JSON
    eg: 
    const jsOBJ = {
        Name: "sharad",
        age: 28
    }

    equivalent Json -> 

    {
        "name": sharad",
        "age": 28,
    }

______________________________________________________________________________________________

API 

(Application Programing Interface)

eg weather app.

here who is client and who is server?
client -> entity that ASKS for resource i.r mobile OWNER/consumer of the mobile in whcih 
this application in installed.

server -> entity that serves the REQUESTed RESOURSE

Now there 2 entities need to connect each over for Data Access.
this connection between them is made possible with the help of API.
(with inclusion of some Protocols)

In JS landscape if we can some function that can talk to the server and return 
the result to the client.

somefunction() -> talks to server n returns back the result back the result 

API can be different types and they are based on some paradigm.
eg: SOAP, REST, RPC etc.

______________________________________________________________________________________________

REST API :
    REST -> Rerepresentational State Transfer

    REST API :
    is an architectural paradigms with a set of constrainsts for defining API.
    Mostly used for creating we servies,

    Defines some function like GET, POST, PUT, PATCH, DELETE.


    GET API : Whenever we wants to perform read operatiom
    POST API-> whenever we want to perform some WRITE operation i,e we ant to save some data/info to Database.

    Put/PATCH -> whenever we want to update/Modify RESOURSE

    DELETE -> whenever we want to Delete resource.


    -----------------------------------------------

    how to call/work these REST API'd in JS ?

    for this we need some API's we can use some them 
    lets use ----->  
    https://jsonplaceholder.typicode.com/

    Now,
    as a frontend engineer our job is to call these API's and display the result on UI.

    To CALL these api's we have a method called -> fetch

    fetch ------->

    Syntax :

    fetch(<USL_OF_API>) returns Promise <>

    eg:
    lets call 1 API by https://jsonplaceholder.typicode.com/
    lets make a get call.