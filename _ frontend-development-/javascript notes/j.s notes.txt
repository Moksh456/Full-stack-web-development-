LIVE SERVER : 
        HTTP://127.0.01/  =  HTTP://LOCAL HOST

        LOCAL HOST -> 127.0.0.1

        HTTP://127.0.0.1/INDEX.HTML

        PROTOCOL://IP_ADDRESS:PORT/INDEX.HTML

________________________________________________________________________________

j.s is very flexible because it will automatic detect which datatype is prefect for the

JAVASCRIPT :
    
    JAVASCRIPT FEATURES ->
     1. SINGLE THREADED
     2. PROTOTYPE BASED
     3. DYNAMIC
     4. INTERPRETED 
     
    MULTIPARADIGM =>

     1. EVENT DRIVEN -> J.S REACT TO EVENT (MOSTLY USER ACTION LIKE SUBMIT BUTTON)
     2. FUNCTIONAL -> PURE FUNCTION/FUNCTION TREATED AS FIRST CLASS.
     3. OBJECT ORIENTED PROGRAMMING LANGUAGE 
     4. IMPERATIVE
     5. DECLARATION

________________________________________________________________________________

JS.VARIABLE => 
     1. DECLARE A VARIABLE
     2. ASSIGN/DEFINE A VARIABLE
     3. USED THAT VARIABLE
     
     1. VAR <VARIABLE_NAME>  {JAVASCRIPT WAS ABLE TO DETECT THE VALUE BY IT NATURE OF THE VALUE THAT'S WHY JAVASCRIPT IS DYNAMIC LANGUAGE}
     2. <VARIABLE NAME> = VALUE;
     3. <VARIABLE NAME>

________________________________________________________________________________

VARIABLE NAME CAN START WITH $,_,AND ALPHABETS AND OTHER NUMBER ARE ALSO ALLOWED ALSO THE ARE.

________________________________________________________________________________

PRIMITIVE DATA TYPE ->
  1. STRING
  2. NUMBER
  3. BOOLEAN
  4. BIGINT
  5. NULL
  6. UNDEFINED 
  7. SYMBOL

  null => is a value that can be ASSIGNed  TYPE OF NULL IS NOT EQUAL TO "NULL" ROTATE IT IS AN "OBJECT" -> IT WAS A BUG THAT GOT INTRODUCED IN J.S INTRODUCED IN JS IN 1990ss

  UNDEFINED -> if we have not assigned any value to variable any value to the variable by the default value is given as undefined and also type of that variable result in "undefined" 
  i.e   VALUE OF DATATYPE BOTH APPEAR TO BE THE SAME.

________________________________________________________________________________

NOT PRIMITIVE DATATYPE :
        1. OBJECT =>
          IS A ENTITY HAVING STATE N BEHAVIOR 

          *=> using object literal->

          VAR OBJECT = {
            KEY: "VALUE"
            KEY: "VALUE"
          }

          VAR PERSON = {
            NAME: "SHARED";
            NAME: 28;
            IS_IIT: FALSE;
            EDUCATION:{
                HIESEC: "PASS";
                B.TECH: "PASS";
            }
          }


          using new KEYword -->
            var person = new object();
            person.name = "SHARED"
            person.age = 25
            person.iition = FALSE
            person.EDUCATION{
            
            }




________________________________________________________________________________

Arrays =>
   declare/DEFINE Arrays

   var x = []; -> declare variable with name "x" and assign it this empty array.
   initialize array with value -> 1,2,3,4.

   eg. var y = [1,1,1,2];

   access value in an array 
   y[0] y[1]


   Que. can we sore different primitive data type in an array?
   var arr  = [1,"rohit",false, 25n];
   ans. yes this happen 

  using new keyword
    var arr = new array ();
    var arr = new array (1,2,3,); -> for declare value in Arrays
    var arr = new array (10); -> declare the length of array.

for (var a = 0; a>arr; a++){
  console.log()
}



________________________________________________________________________________

FUNCTION => 
      syntax -> 
       function fun_name(){
        function reusable code of and set of insertion to ne executed
       }

       eg. function sum(a,b){
        return a+b
       }


________________________________________________________________________________

function sum (a,b){
  var sum = a+b;

  return function dummy (){
    console.log("I am a dummy");
  }
}

arrays are internally store as a object in j.S

________________________________________________________________________________

type of a function (){}
      => function

functin sumof(a,b){
  var sum a+b;

  var dummy = function sharad(){
    console.log("i am a dummy");
  }

  return dummy;
}
var result = sumof(50,30);
console.log(result());

J.S operators :- /,+,*,-
 operands ->   2(operands)  +(operator)  3(operands)