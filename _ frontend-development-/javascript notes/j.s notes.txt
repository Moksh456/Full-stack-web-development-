LIVE SERVER : 
        HTTP://127.0.01/  =  HTTP://LOCAL HOST

        LOCAL HOST -> 127.0.0.1

        HTTP://127.0.0.1/INDEX.HTML

        PROTOCOL://IP_ADDRESS:PORT/INDEX.HTML

________________________________________________________________________________

j.s is very flexible because it will automatic detect which datatype is prefect for the

JAVASCRIPT :
    
    JAVASCRIPT FEATURES ->
     1. SINGLE THREADED
     2. PROTOTYPE BASED
     3. DYNAMIC
     4. INTERPRETED 
     
    MULTIPARADIGM =>

     1. EVENT DRIVEN -> J.S REACT TO EVENT (MOSTLY USER ACTION LIKE SUBMIT BUTTON)
     2. FUNCTIONAL -> PURE FUNCTION/FUNCTION TREATED AS FIRST CLASS.
     3. OBJECT ORIENTED PROGRAMMING LANGUAGE 
     4. IMPERATIVE
     5. DECLARATION

________________________________________________________________________________

JS.VARIABLE => 
     1. DECLARE A VARIABLE
     2. ASSIGN/DEFINE A VARIABLE
     3. USED THAT VARIABLE
     
     1. VAR <VARIABLE_NAME>  {JAVASCRIPT WAS ABLE TO DETECT THE VALUE BY IT NATURE OF THE VALUE THAT'S WHY JAVASCRIPT IS DYNAMIC LANGUAGE}
     2. <VARIABLE NAME> = VALUE;
     3. <VARIABLE NAME>

________________________________________________________________________________

VARIABLE NAME CAN START WITH $,_,AND ALPHABETS AND OTHER NUMBER ARE ALSO ALLOWED ALSO THE ARE.

________________________________________________________________________________

PRIMITIVE DATA TYPE ->
  1. STRING
  2. NUMBER
  3. BOOLEAN
  4. BIGINT
  5. NULL
  6. UNDEFINED 
  7. SYMBOL

  null => is a value that can be ASSIGNed  TYPE OF NULL IS NOT EQUAL TO "NULL" ROTATE IT IS AN "OBJECT" -> IT WAS A BUG THAT GOT INTRODUCED IN J.S INTRODUCED IN JS IN 1990ss

  UNDEFINED -> if we have not assigned any value to variable any value to the variable by the default value is given as undefined and also type of that variable result in "undefined" 
  i.e   VALUE OF DATATYPE BOTH APPEAR TO BE THE SAME.

________________________________________________________________________________

NOT PRIMITIVE DATATYPE :
        1. OBJECT =>
          IS A ENTITY HAVING STATE N BEHAVIOR 

          *=> using object literal->

          VAR OBJECT = {
            KEY: "VALUE"
            KEY: "VALUE"
          }

          VAR PERSON = {
            NAME: "SHARED";
            NAME: 28;
            IS_IIT: FALSE;
            EDUCATION:{
                HIESEC: "PASS";
                B.TECH: "PASS";
            }
          }


          using new KEYword -->
            var person = new object();
            person.name = "SHARED"
            person.age = 25
            person.iition = FALSE
            person.EDUCATION{
            
            }




________________________________________________________________________________

Arrays =>
   declare/DEFINE Arrays

   var x = []; -> declare variable with name "x" and assign it this empty array.
   initialize array with value -> 1,2,3,4.

   eg. var y = [1,1,1,2];

   access value in an array 
   y[0] y[1]


   Que. can we sore different primitive data type in an array?
   var arr  = [1,"rohit",false, 25n];
   ans. yes this happen 

  using new keyword
    var arr = new array ();
    var arr = new array (1,2,3,); -> for declare value in Arrays
    var arr = new array (10); -> declare the length of array.

for (var a = 0; a>arr; a++){
  console.log()
}



________________________________________________________________________________

FUNCTION => 
      syntax -> 
       function fun_name(){
        function reusable code of and set of insertion to ne executed
       }

       eg. function sum(a,b){
        return a+b
       }


________________________________________________________________________________

function sum (a,b){
  var sum = a+b;

  return function dummy (){
    console.log("I am a dummy");
  }
}

arrays are internally store as a object in j.S

________________________________________________________________________________

type of a function (){}
      => function

functin sumof(a,b){
  var sum a+b;

  var dummy = function sharad(){
    console.log("i am a dummy");
  }

  return dummy;
}
var result = sumof(50,30);
console.log(result());

________________________________________________________________________________
J.S operators :- /,+,*,-
 operands ->   2(operands)  +(operator)  3(operands)


operands -> op1 operator op2 (binary operator)

op1 operator -> eg a++ (unary operator)

________________________________________________________________________________
arithmetic = 
      +,-,*,/,%,++,-- .......etc.

        10 + "20"   = 1020
        "10" + "20" = 1020
        10 + true   = 11
        10 + false  = 10
        10 + " "    = 10
        10 + null   = 10
        10 + undefined = NAN

number + string  -> 
  choice1 = convert both into a to number 

  choice2 = convert both in String.

  but one rule remains some -> 
  i.e both type should should be same.

  they gone with option2 -> ie 10 + "20" internally convert to =
   => "10" + "20" -> finally 2string concat (+) -> "1020"

________________________________________________________________________________

number + true 

  number + boolean ->
  but one rule remain same -> i.e bothtype should be same 

  number + boolean ->
   choice 1 = both convert into a boolean = b + B
   choice 2 = both convert into a number = n+N

   "a" + "b" = NAN

________________________________________________________________________________

comparison operators -> 
 <,>,<=,>=,==,===

 20 == 20     = true
 20 == "20"   = true
 20 === 20    = true
 20 === "20"  = false

 == only check the value
 === check the value and also check the value both.

________________________________________________________________________________

short overview of (DOM):- 
                          DOM(Document, object, Model)

  browser = lets represent html Document in the form of object.

  j.s -> DOM ->

  js file    -> Dom -> html

Document.queryselector("h1");

var element = document.queryselector("h1");

element = h1

element.innertext = h1 value

for select id in js file  -> docment.queryselector(#id name);

________________________________________________________________________________

logical operators =>
      (and)&&, ||(or), !(not)

      A && B  
        if a -> false will B Be evaluted 
        ans: no

        if a is true then B is evalated true (yes) 
      var a =  true && "sha" 
      ans: sha

      var a =   true && true
      ans: true
      
      var a = false && true
       ans: false
  if left operands is truen then return right operands.

  here left operand neet to be type of boolean and if it is not then implicity javascript will convert is to boolean () constructor.

||(or) =>
      is left operands is true then return left return

!(not)=>
 it is used for not.

________________________________________________________________________________

Assigment operators = 

=, +=, -=, *=, /=, %/ **=

________________________________________________________________________________

bitwise operator => 
  not imp for web dev but very imp for dsa.

  var a = 3 +  2 *  5  = 13
  var a = (3+2) * 5    = 25
________________________________________________________________________________

  precedence & associativity:
  each operators in an lang have it own associativity there are 2 type left associative && right associative.

  operators ->
    (=) -> either flow will be from left to right or from right to left.


________________________________________________________________________________

var a = 3 + 2 * 3;
first check operators who have highest precedence then executive them according to their associativity then again repeat return 1
________________________________________________________________________________

scope ->
 local vs global

  local scope->
  if any variable is defined inside function then that varuable can only be accessed inside that function 

  global Scope ->
  if any variable is defined globally them it is accessible to every function.
________________________________________________________________________________

function ->
syntax 1 :
function DECLARATION
funciton <function name>(){

} 

syntax 2 -> 
function expression


2.1 -> named function
var <variable_name> = function<function_name>(){
.......
}

2.2 ->
anonymous function

var <variable_name> = function(){
......
......
........
Runtime error
.....
......
........
}


 syntax 3->
Ife (immediately invoked function expression)


 function my(){
  var sum = 2+3;
  return sum
 }
 my();

requiraments->
 -> i want to be function be execute immediately but also it should execute only once 


syntax: 
{
  function (){
    ......
  }
}();


4. Arrow function (Es6) - tbd  (to be discussed)


________________________________________________________________________________

How j.s works?
j.s is SINGLE THREADED , it is also synchromous ->

that means only 1 statement can execute at a time.

Execution context :
Whenever js script is INTERPRETED, execution is created context is created for each function invocation.

by default there is global execution context created Whenever our code is executed. 

Execution context is made of 2 phases :
  1. memory 
  2. execution

  1. Memory creation :
  Memory is allocated to each object and function (internally function are also object ) 

  eg:
  function sum(){
    var result = 10 + 20;
    console.log(result);
    return result;
  }

  var name = "sharad";

  here, sum and name needs to be allocated memory.

  once memory is allocated js will assign value to these.

  for variable default value is undefined.

  for function default value is -> whole funciton body is copy/pasted.

  2. execution phases: 
  

________________________________________________________________________________

